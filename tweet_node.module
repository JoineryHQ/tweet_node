<?php

/**
 * @file
 * Contains tweet_node.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\node\NodeForm;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function tweet_node_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the tweet_node module.
    case 'help.page.tweet_node':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Tweet about a node when the node is saved.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function tweet_node_theme() {
  return [
    'tweet_node' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function tweet_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof NodeForm) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $form_object->getEntity();
    $node_type = $node->getType();

    if (\Drupal::currentUser()->hasPermission('tweet about content')) {
      $weight = 0;
      foreach ($form as $element) {
        if (is_array($element) && ($element['#type'] ?? '') == 'details') {
          $weight = max([$weight, $element['#weight']]);
        }
      }
      $form['tweet_node'] = [
        '#type' => 'details',
        '#title' => t('Tweet'),
        '#access' => \Drupal::currentUser()->hasPermission('tweet about content'),
        '#open' => 0,
        '#group' => 'advanced',
        '#tree' => TRUE,
        '#weight' => ++$weight,
      ];

      $config = \Drupal::config('tweet_node.settings');
      if ($config->get('twitter_account_holder')) {
        $form['tweet_node']['is_tweet_node'] = [
          '#type' => 'checkbox',
          '#field_name' => 'is_tweet_node',
          '#title' => t('Tweet about this'),
          '#required' => FALSE,
          '#default_value' => 0,
          '#weight' => $weight++,
        ];
        $form['tweet_node']['tweet_body'] = [
          '#type' => 'textarea',
          '#field_name' => 'tweet_body',
          '#title' => t('Tweet body'),
          '#required' => FALSE,
          '#default_value' => $config->get('default_tweet_body'),
          '#weight' => $weight++,
          '#states' => [
            //show this textfield only if the radio 'other' is selected above
            'visible' => [
              //don't mistake :input for the type of field. You'll always use
              //:input here, no matter whether your source is a select, radio or checkbox element.
              ':input[name="tweet_node[is_tweet_node]"]' => ['checked' => TRUE],
            ],
          ],
        ];

        $form['actions']['submit']['#submit'][] = '_tweet_node_node_form_submit';
        $form['#validate'][] = '_tweet_node_node_form_validate';
      }
      else {
        $form['tweet_node'][] = [
          '#type' => 'markup',
          '#markup' => t('The Tweet Node module is not fully configured. Please <a href="@tweet-node-config-url">edit the Tweet Node configuration</a>.', ['@tweet-node-config-url' => '/admin/config/tweet_node/settings']),
        ];
      }
    }
  }
}

/**
 * Validation handler for node edit form.
 *
 * Ensure tweet body is valid, and store url-replaced tweet body for processing
 * in submit handler.
 */
function _tweet_node_node_form_validate(array &$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  if ($values['tweet_node']['is_tweet_node']) {
    if (empty($values['tweet_node']['tweet_body'])) {
      $form_state->setErrorByName('tweet_node', t('Tweet body is required if "Teeet about this" is selected.'));
    }
    else {
      $tweetNodeBodyFinal = $values['tweet_node']['tweet_body'];
      $tweetLengthErrorMessage = t('The Tweet body was too long; it must be 140 characters or less.');
      if (strpos($values['tweet_node']['tweet_body'], '!url') !== FALSE) {
        $nodeUrl = _tweet_node_get_node_url($form_state, $values);
        $tweetNodeBodyFinal = str_replace('!url', $nodeUrl, $values['tweet_node']['tweet_body']);
        $tweetLengthErrorMessage = t('The Tweet body was too long; it must be 140 characters or less, with the URL.');
      }
      if (strlen($tweetNodeBodyFinal) > 140) {
        $form_state->setErrorByName('tweet_node', $tweetLengthErrorMessage);
      }
      else {
        $form_state->setValue('tweet_node_body_final', $tweetNodeBodyFinal);
      }
    }
  }
}

/**
 * Submit handler for node edit form.
 *
 * Auto-tweet when so instructed in the node.edit form.
 */
function _tweet_node_node_form_submit(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  // IF the user has the "Tweet about content" permission,
  // AND if "Tweet about this" is checked,
  // AND if the node is in Published status,
  // AND the url-replaced tweet body has any length,
  // THEN replace `!url` in "Tweet body" with the absolute URL of the node and tweet the node.
  if (\Drupal::currentUser()->hasPermission('tweet about content')) {
    $values = $form_state->getValues();
    if (
      $values['status']['value'] == \Drupal\node\NodeInterface::PUBLISHED
      && $values['tweet_node']['is_tweet_node']
      && !empty($values['tweet_node_body_final'])
    ) {
      _tweet_node_send_tweet($values['tweet_node_body_final']);
    }
  }
}

function _tweet_node_send_tweet($tweetBody) {

  // Gets the user manager to retrieve tokens for a user.
  /** @var \Drupal\social_post\User\UserManager $user_manager */
  $user_manager = \Drupal::service('social_post.user_manager');

  $config = \Drupal::config('tweet_node.settings');
  $twitterAccountHolderUid = $config->get('twitter_account_holder');

  // Gets all the Twitter accounts associated with the node author account.
  $accounts = $user_manager->getAccounts('social_post_twitter', $twitterAccountHolderUid);

  // If no twitter account linked, the rest is useless.
  if (empty($accounts)) {
    $twitterAccountHolderUser = \Drupal\user\Entity\User::load($twitterAccountHolderUid);

    \Drupal::messenger()->addWarning(t('Tweet not sent. A Twitter Account Holder user is specified (%username), but no Twitter account is configured for that user. Please <a href="/user/@uid/edit">edit that user</a> to configure Twitter account access.',
      [
        '%username' => $twitterAccountHolderUser->getAccountName(),
        '@uid' => $twitterAccountHolderUid
      ]
    ));
    \Drupal::messenger()->addWarning(t('Would have tweeted: '). $tweetBody);
  }
  else {

    // Get an instance of Social Post Twitter Network plugin.
    /** @var \Drupal\social_post_twitter\Plugin\Network\TwitterPostInterface $plugin */
    $client = \Drupal::service('plugin.network.manager')
      ->createInstance('social_post_twitter')
      ->getSdk();

    // Get the twitter post manager to tweet.
    /** @var \Drupal\social_post_twitter\TwitterPostManager $post_manager */
    $post_manager = \Drupal::service('twitter_post.manager');

    /** @var \Drupal\social_post\Entity\SocialPost $account */
    foreach ((array) $accounts as $account) {
      // Build credentials for that particular twitter account.
      $access_token = json_decode($account->getToken(), TRUE);
      // Post our tweet on behalf of the user to this associated twitter account.
      $tweet = [
        'status' => $tweetBody,
      ];
      $doPostResult = $post_manager
        ->setClient($client)
        ->setOauthToken(
          $access_token['oauth_token'],
          $access_token['oauth_token_secret']
        )
        ->doPost($tweet);
      if ($doPostResult) {
        \Drupal::messenger()->addStatus(
          t('Posted under Twitter user <a href="https://twitter.com/i/user/@providerUserId">%twitterName</a>: @tweetBody',[
            '%twitterName' => $account->getName(),
            '@tweetBody' => $tweetBody,
            '@providerUserId' => $account->getProviderUserId(),
          ])
        );
      }
      else {
        \Drupal::messenger()->addError(
          t('Failed posting tweet under Twitter user <a href="https://twitter.com/i/user/@providerUserId">%twitterName</a>: @tweetBody',[
            '%twitterName' => $account->getName(),
            '@tweetBody' => $tweetBody,
            '@providerUserId' => $account->getProviderUserId(),
          ])
        );
      }

    }
  }
}

function _tweet_node_get_node_url($form_state, $values) {
  /* This is executed during form validation (because we need the full URL in
   * order to validate tweet length. Therefore, we must build the full URL based
   * on the submited alias (whether it is empty or not).
   */
  if (!empty($values['path'][0]['alias'])) {
   $alias = $values['path'][0]['alias'];
  }
  else {
    $node = $form_state->getformObject()->getEntity();
    $alias = '/node/' . $node->id();
  }

  /* Because we're using the raw submitted value for the alias, it's possible
   * that this alias will fail validation, which will result in an InvalidArgumentException
   * from Url::fromUri; therefore we silently catch such exceptions. Drupal form
   * validation will report them on its own.
   */
  try {
    $nodeUrl= Url::fromUri('internal:' . $alias, array('absolute' => TRUE))->toString();
  } catch (\InvalidArgumentException $e) {
    // Silently do nothing.
  }
  return $nodeUrl;
}
